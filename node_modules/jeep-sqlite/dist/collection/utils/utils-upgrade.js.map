{"version":3,"file":"utils-upgrade.js","sourceRoot":"","sources":["../../src/utils/utils-upgrade.ts"],"names":[],"mappings":"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","sourcesContent":["import { SQLiteVersionUpgrade, SQLiteSet } from '../interfaces/interfaces';\nimport { setForeignKeyConstraintsEnabled, dbChanges, backupTables, execute,\n         executeSet, findCommonColumns, updateNewTablesData,\n         setVersion, isTableExists } from '../utils/utils-sqlite';\nimport { copyDBToStore, setDBToStore } from './utils-store';\nimport { dropElements, dropTempTables } from './utils-drop';\n\nexport const onUpgrade = async (\n  mDb: any,\n  vUpgDict: Record<number, SQLiteVersionUpgrade>,\n  dbName: string,\n  curVersion: number,\n  targetVersion: number,\n  store: any\n): Promise<number> => {\n  let changes: number = -1;\n  const upgrade: SQLiteVersionUpgrade = vUpgDict[curVersion];\n  if (upgrade != null) {\n    const keys: string[] = Object.keys(upgrade);\n    if (!keys.includes('toVersion')) {\n      return Promise.reject(new Error('onUpgrade: toVersion not given'));\n    }\n    const toVersion: number = upgrade.toVersion;\n    if (!keys.includes('statement')) {\n      return Promise.reject(new Error('onUpgrade: statement not given'));\n    }\n    const statement: string = upgrade.statement;\n    let set: SQLiteSet[] = [];\n    if (keys.includes('set')) {\n      set = upgrade.set;\n    }\n    if (targetVersion < toVersion) {\n      let msg = 'Error: version mistmatch ';\n      msg += 'Upgrade Statement would upgrade to ';\n      msg += `version ${toVersion} , but target version `;\n      msg += `is ${targetVersion} for database ${dbName}`;\n      msg += ` and version ${curVersion}`;\n      return Promise.reject(new Error(`onUpgrade: ${msg}`));\n    }\n    try {\n        // set Foreign Keys Off\n        await setForeignKeyConstraintsEnabled(mDb, false);\n        // copy the db\n\n        await copyDBToStore(dbName, `backup-${dbName}`, store);\n        const initChanges = await dbChanges(mDb);\n\n        // Here we assume that all table schemas are given\n        // in the upgrade statement\n        if (statement.length > 0) {\n          await executeStatementProcess(mDb, statement);\n          // save the database to store\n          await setDBToStore(mDb, dbName, store);\n\n          // Here we assume that the Set contains only\n          // - the data for new tables\n          //   as INSERT statements\n          // - the data for new columns in existing tables\n          //   as UPDATE statements\n          if (set.length > 0) {\n            await executeSetProcess(mDb, set, toVersion);\n            // save the database to store\n            await setDBToStore(mDb, dbName, store);\n          }\n        }\n        // set Foreign Keys On\n        await setForeignKeyConstraintsEnabled(mDb, true);\n        changes = (await dbChanges(mDb)) - initChanges;\n        // save the database to store\n        await setDBToStore(mDb, dbName, store);\n        return Promise.resolve(changes);\n    } catch (err) {\n      return Promise.reject(new Error(`onUpgrade: ${err.message}`));\n    }\n  } else {\n    return Promise.reject(new Error('onUpgrade: upgrade not found'));\n  }\n}\nexport const executeStatementProcess = async (mDb: any, statement: string): Promise<void> => {\n  let alterTables: Record<string, string[]> = {};\n  let commonColumns : Record<string, string[]> = {};\n  try {\n\n\n    // -> backup all existing tables  \"tableName\" in\n    //    \"temp_tableName\"\n    alterTables = await backupTables(mDb);\n\n    // -> Drop all Indexes\n    await dropElements(mDb, 'index');\n    // -> Drop all Triggers\n    await dropElements(mDb, 'trigger');\n\n    // -> Create new tables from upgrade.statement\n    const changes: number = await execute(mDb, statement, false);\n    if (changes < 0) {\n      return Promise.reject(\n        new Error('ExecuteStatementProcess: ' + 'changes < 0'),\n      );\n    }\n    // -> Create the list of table's common fields\n    commonColumns = await findCommonColumns(mDb, alterTables);\n\n    // -> Update the new table's data from old table's data\n    if (Object.keys(commonColumns).length > 0) {\n      await updateNewTablesData(mDb, commonColumns);\n    }\n\n    return Promise.resolve();\n  } catch (err) {\n    return Promise.reject(\n      new Error(`ExecuteStatementProcess: ${err.message}`),\n    );\n  } finally {\n    // -> Drop _temp_tables\n    await dropTempTables(mDb, alterTables);\n      // -> Do some cleanup\n      alterTables = {};\n      commonColumns = {};\n  }\n\n}\nexport const executeSetProcess = async (mDb: any, set: SQLiteSet[], toVersion: number): Promise<void> => {\n  try {\n    // -> load new data\n    const lastId = await executeSet(mDb, set, false);\n    if (lastId < 0) {\n      return Promise.reject(new Error('ExecuteSetProcess: lastId ' + '< 0'));\n    }\n    // -> update database version\n    await setVersion(mDb, toVersion);\n    // -> update syncDate if any\n    const retB = await isTableExists(mDb, 'sync_table');\n    if (retB) {\n      const sDate: number = Math.round(new Date().getTime() / 1000);\n      let stmt = 'UPDATE sync_table SET ';\n      stmt += `sync_date = ${sDate} WHERE id = 1;`;\n      const changes: number = await execute(mDb, stmt, false);\n      if (changes < 0) {\n        return Promise.reject(\n          new Error('ExecuteSetProcess: changes ' + '< 0'),\n        );\n      }\n    }\n    return Promise.resolve();\n  } catch (err) {\n    return Promise.reject(new Error(`ExecuteSetProcess: ${err.message}`));\n  }\n}\n"]}