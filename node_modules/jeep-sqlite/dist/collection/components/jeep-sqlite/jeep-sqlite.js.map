{"version":3,"file":"jeep-sqlite.js","sourceRoot":"","sources":["../../../src/components/jeep-sqlite/jeep-sqlite.tsx"],"names":[],"mappings":"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":["import { Component, Method, Event, EventEmitter, Prop, State, Watch } from '@stencil/core';\nimport { Database } from '../../utils/database';\nimport localForage from 'localforage';\nimport { EchoOptions, ConnectionOptions, SQLiteOptions, SQLiteExecuteOptions, SQLiteQueryOptions,\n         SQLiteRunOptions, SQLiteSetOptions, SQLiteSet, SQLiteTableOptions,\n         SQLiteSyncDateOptions, SQLiteImportOptions, SQLiteExportOptions, JsonSQLite,\n         SQLiteUpgradeOptions, SQLiteVersionUpgrade, AllConnectionsOptions,\n         EchoResult, SQLiteChanges,SQLiteResult, SQLiteValues, SQLiteSyncDate,\n         SQLiteJson, JsonProgressListener, SQLiteVersion,  SQLiteFromAssetsOptions } from '../../interfaces/interfaces';\nimport { isJsonSQLite } from '../../utils/utils-json';\nimport { saveDBToStore, isDBInStore, getDBListFromStore, removeDBFromStore } from '../../utils/utils-store';\nimport * as JSZip from 'jszip';\n\n@Component({\n  tag: 'jeep-sqlite',\n  styleUrl: 'jeep-sqlite.css',\n  assetsDirs: ['assets'],\n  shadow: true,\n})\nexport class JeepSqlite {\n\n  //************************\n  //* Property Definitions *\n  //************************\n\n  /**\n   * AutoSave\n   */\n  @Prop({\n    attribute: \"autosave\",\n    reflect: true\n  }) autoSave: boolean;\n\n  //*********************\n  //* State Definitions *\n  //*********************\n\n  @State() innerAutoSave: boolean;\n\n  //*****************************\n  //* Watch on Property Changes *\n  //*****************************\n\n  @Watch('autoSave')\n  parseAutoSave(newValue: boolean) {\n    this.innerAutoSave = newValue;\n  }\n\n  //*********************\n  //* Event Definitions *\n  //*********************\n\n  @Event({eventName:'jeepSqliteImportProgress',\n      composed: true,\n      cancelable: true,\n      bubbles: true,\n  }) importProgress: EventEmitter<JsonProgressListener>;\n  @Event({eventName:'jeepSqliteExportProgress',\n      composed: true,\n      cancelable: true,\n      bubbles: true,\n  }) exportProgress: EventEmitter<JsonProgressListener>;\n\n  //**********************\n  //* Method Definitions *\n  //**********************\n\n  @Method()\n  async echo(options: EchoOptions): Promise<EchoResult> {\n    return options;\n  }\n  @Method()\n  async createConnection(options: ConnectionOptions): Promise<void> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const version: number = options.version ? options.version : 1;\n    try {\n      await this._createConnection(dbName, version);\n      return Promise.resolve();\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async isConnection(options: SQLiteOptions): Promise<SQLiteResult> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    const ret: SQLiteResult = await this._isConnection(dbName);\n    return Promise.resolve(ret);\n  }\n  @Method()\n  async closeConnection(options: SQLiteOptions): Promise<void> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    try {\n      await this._closeConnection(dbName);\n      return Promise.resolve();\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async open(options: SQLiteOptions): Promise<void> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    try {\n      await this._open(dbName);\n      return Promise.resolve();\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async close(options: SQLiteOptions): Promise<void> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    try {\n      await this._close(dbName);\n      return Promise.resolve();\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async getVersion(options: SQLiteOptions): Promise<SQLiteVersion> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    try {\n      const res: SQLiteVersion = await this._getVersion(dbName);\n      return Promise.resolve(res);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async execute(options: SQLiteExecuteOptions): Promise<SQLiteChanges> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    if (!keys.includes('statements') || options.statements.length === 0) {\n      return Promise.reject('Must provide raw SQL statements');\n    }\n    const dbName: string = options.database;\n    const statements: string = options.statements;\n    let transaction: boolean= true;\n    if (keys.includes('transaction')) transaction = options.transaction;\n    try {\n      const changes: SQLiteChanges = await this._execute(dbName, statements, transaction);\n      return Promise.resolve(changes);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async executeSet(options: SQLiteSetOptions): Promise<SQLiteChanges> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    if (!keys.includes('set') || options.set.length === 0) {\n      return Promise.reject('Must provide a non-empty set of SQL statements');\n    }\n    const dbName: string = options.database;\n    const setOfStatements: SQLiteSet[] = options.set;\n    let transaction: boolean= true;\n    if (keys.includes('transaction')) transaction = options.transaction;\n    try {\n      const changes: SQLiteChanges = await this._executeSet(dbName, setOfStatements, transaction);\n      return Promise.resolve(changes);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async run(options: SQLiteRunOptions): Promise<SQLiteChanges> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    if (!keys.includes('statement') || options.statement.length === 0) {\n      return Promise.reject('Must provide a run statement');\n    }\n    const dbName: string = options.database;\n    const statement: string = options.statement;\n    let values: any[]  = [];\n    if (keys.includes('values')) {\n      values = options.values.length > 0 ? options.values : [];\n    }\n    let transaction: boolean= true;\n    if (keys.includes('transaction')) transaction = options.transaction;\n    try {\n      const retChanges:  SQLiteChanges = await this._run(dbName, statement, values, transaction);\n      return Promise.resolve(retChanges);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async query(options: SQLiteQueryOptions): Promise<SQLiteValues> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    if (!keys.includes('statement') || options.statement.length === 0) {\n      return Promise.reject('Must provide a query statement');\n    }\n    let values: any[]  = [];\n    if (keys.includes('values')) {\n      values = options.values.length > 0 ? options.values : [];\n    }\n    const dbName: string = options.database;\n    const statement: string = options.statement;\n    try {\n      const retValues = await this._query(dbName, statement, values);\n      return Promise.resolve(retValues);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async getTableList(options: SQLiteOptions): Promise<SQLiteValues> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    try {\n      const retValues = await this._getTableList(dbName);\n      return Promise.resolve(retValues);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async isDBExists(options: SQLiteOptions): Promise<SQLiteResult> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    try {\n      const ret: SQLiteResult = await this._isDBExists(dbName);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async isDBOpen(options: SQLiteOptions): Promise<SQLiteResult> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    try {\n      const ret: SQLiteResult = await this._isDBOpen(dbName);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async deleteDatabase(options: SQLiteOptions): Promise<void> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    try {\n      return await this._deleteDatabase(dbName);\n    }\n    catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async isStoreOpen(): Promise<boolean> {\n    return Promise.resolve(this.isStore);\n  }\n  @Method()\n  async copyFromAssets(options: SQLiteFromAssetsOptions): Promise<void> {\n    let overwrite: boolean;\n    if(options != null) {\n      const keys = Object.keys(options);\n      overwrite = keys.includes('overwrite') ? options.overwrite : true;\n    } else {\n      overwrite = true;\n    }\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    try {\n      await this._copyFromAssets(overwrite);\n      return Promise.resolve();\n    }\n    catch (err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async isTableExists(options: SQLiteTableOptions): Promise<SQLiteResult> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    if (!keys.includes('table')) {\n      return Promise.reject('Must provide a table name');\n    }\n    const tableName: string = options.table;\n    try {\n      const ret: SQLiteResult = await this._isTableExists(dbName, tableName);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async createSyncTable(options: SQLiteOptions): Promise<SQLiteChanges> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    try {\n      const ret: SQLiteChanges = await this._createSyncTable(dbName);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async getSyncDate(options: SQLiteSyncDateOptions): Promise<SQLiteSyncDate> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    try {\n      const ret: SQLiteSyncDate = await this._getSyncDate(dbName);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async setSyncDate(options: SQLiteSyncDateOptions): Promise<void> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    if (!keys.includes('syncdate')) {\n      return Promise.reject('Must provide a synchronization date');\n    }\n    const dbName: string = options.database;\n    const syncDate: string = options.syncdate;\n    try {\n      await this._setSyncDate(dbName, syncDate);\n      return Promise.resolve();\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async isJsonValid(options: SQLiteImportOptions): Promise<SQLiteResult> {\n    const keys = Object.keys(options);\n    if (!keys.includes('jsonstring')) {\n      return Promise.reject('Must provide a json object');\n    }\n    const jsonStrObj: string = options.jsonstring;\n    try {\n      const ret = await this._isJsonValid(jsonStrObj);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async importFromJson(options: SQLiteImportOptions): Promise<SQLiteChanges> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('jsonstring')) {\n      return Promise.reject('Must provide a json object');\n    }\n    const jsonStrObj: string = options.jsonstring;\n    try {\n      const ret = await this._importFromJson(jsonStrObj);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async exportToJson(options: SQLiteExportOptions): Promise<SQLiteJson> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    if (!keys.includes('jsonexportmode')) {\n      return Promise.reject('Must provide a json export mode');\n    }\n    const dbName: string = options.database;\n    const exportMode: string = options.jsonexportmode;\n    try {\n      const ret = await this._exportToJson(dbName, exportMode);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async deleteExportedRows(options: SQLiteOptions): Promise<void> {\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    try {\n      await this._deleteExportedRows(dbName);\n      return Promise.resolve();\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async addUpgradeStatement(options: SQLiteUpgradeOptions): Promise<void> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    let keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    if (!keys.includes('upgrade')) {\n      return Promise.reject('Must provide an upgrade statement');\n    }\n    const dbName: string = options.database;\n    const upgrade = options.upgrade[0];\n    keys = Object.keys(upgrade);\n    if (\n      !keys.includes('fromVersion') ||\n      !keys.includes('toVersion') ||\n      !keys.includes('statement')\n    ) {\n      return Promise.reject(\n        'Must provide an upgrade capSQLiteVersionUpgrade Object',\n      );\n    }\n    if (typeof upgrade.fromVersion != 'number') {\n      return Promise.reject('ugrade.fromVersion must be a number');\n    }\n    const upgVDict: Record<number, SQLiteVersionUpgrade> = {};\n    upgVDict[upgrade.fromVersion] = upgrade;\n    this._versionUpgrades[dbName] = upgVDict;\n    return Promise.resolve();\n  }\n  @Method()\n  async isDatabase(options: SQLiteOptions): Promise<SQLiteResult> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    try {\n      const ret: SQLiteResult = await this._isDatabase(dbName);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async getDatabaseList(): Promise<SQLiteValues> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    try {\n      const ret: SQLiteValues = await this._getDatabaseList();\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async checkConnectionsConsistency(options: AllConnectionsOptions): Promise<SQLiteResult> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('dbNames')) {\n      return Promise.reject(`Must provide a list of connection's name`);\n    }\n    const dbNames: string[] = options.dbNames;\n    try {\n      const ret = await this._checkConnectionsConsistency(dbNames);\n      return Promise.resolve(ret);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  @Method()\n  async saveToStore(options: SQLiteOptions): Promise<void> {\n    if(!this.isStore) {\n      return Promise.reject(`>>> jeep-sqlite StoreName: ${this.storeName} is not opened` );\n    }\n    const keys = Object.keys(options);\n    if (!keys.includes('database')) {\n      return Promise.reject('Must provide a database name');\n    }\n    const dbName: string = options.database;\n    try {\n      await this._saveToStore(dbName);\n      return Promise.resolve();\n    } catch(err) {\n      return Promise.reject(err);\n    }\n  }\n  //********************************\n  //* Component Internal Variables *\n  //********************************\n\n  private store: LocalForage;\n  private storeName: string;\n  private isStore: boolean = false;\n  private _dbDict: any = {};\n  private databaseList: any = {};\n  private _versionUpgrades: Record<string, Record<number, SQLiteVersionUpgrade>> = {};\n\n\n  //*******************************\n  //* Component Lifecycle Methods *\n  //*******************************\n\n  async componentWillLoad() {\n    this.isStore = await this.openStore(\"jeepSqliteStore\",\"databases\");\n    this.parseAutoSave(this.autoSave != undefined ? this.autoSave : false);\n  }\n  componentDidLoad() {\n    if(!this.isStore) {\n      console.log('jeep-sqlite isStore = false');\n    }\n  }\n\n  //******************************\n  //* Private Method Definitions *\n  //******************************\n\n  private async _createConnection(database: string, version: number): Promise<void> {\n    let upgDict: Record<number, SQLiteVersionUpgrade> = {};\n    const vUpgKeys: string[] = Object.keys(this._versionUpgrades);\n    if (vUpgKeys.length !== 0 && vUpgKeys.includes(database)) {\n      upgDict = this._versionUpgrades[database];\n    }\n    try {\n      const mDB: Database = new Database(database + 'SQLite.db', version, upgDict,\n                                         this.store, this.innerAutoSave);\n      this._dbDict[database] = mDB;\n      return Promise.resolve();\n    } catch(err) {\n      return Promise.reject(err.message);\n    }\n  }\n  private async _isConnection(database: string): Promise<SQLiteResult> {\n    const keys = Object.keys(this._dbDict);\n    if (keys.includes(database)) {\n      return {result: true};\n    } else {\n      return {result: false};\n    }\n  }\n  private async _closeConnection(database: string): Promise<void> {\n    const keys = Object.keys(this._dbDict);\n    if (!keys.includes(database)) {\n      return Promise.reject(`CloseConnection: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[database];\n    try {\n      if (mDB.isDBOpen()) {\n        // close the database\n        try {\n          await mDB.close();\n        } catch (err) {\n          return Promise.reject(\n            `CloseConnection: close ${database} failed ${err}`);\n        }\n      }\n      // remove the connection from dictionary\n      delete this._dbDict[database];\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(`CloseConnection: ${err.message}`);\n    }\n  }\n  private async _open(database: string): Promise<void> {\n    const keys = Object.keys(this._dbDict);\n    if (!keys.includes(database)) {\n      return Promise.reject(`Open: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[database];\n    try {\n      await mDB.open();\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(`Open: ${err.message}`);\n    }\n  }\n  private async _close(database: string): Promise<void> {\n    const keys = Object.keys(this._dbDict);\n    if (!keys.includes(database)) {\n      return Promise.reject(`Close: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[database];\n    try {\n      await mDB.close();\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(`Close: ${err.message}`);\n    }\n  }\n  private async _saveToStore(database: string): Promise<void> {\n    const keys = Object.keys(this._dbDict);\n    if (!keys.includes(database)) {\n      return Promise.reject(`SaveToStore: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[database];\n    try {\n      await mDB.saveToStore();\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(`SaveToStore: ${err.message}`);\n    }\n  }\n  private async _getVersion(database: string): Promise<SQLiteVersion> {\n    const keys = Object.keys(this._dbDict);\n    if (!keys.includes(database)) {\n      return Promise.reject(`Open: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[database];\n    try {\n      const version: number = await mDB.getVersion();\n      const ret: SQLiteVersion = {} as SQLiteVersion;\n      ret.version = version;\n      return Promise.resolve(ret);\n    } catch (err) {\n      return Promise.reject(`Open: ${err.message}`);\n    }\n  }\n\n  private async _execute(database:string, statements: string, transaction: boolean): Promise<SQLiteChanges> {\n    const keys = Object.keys(this._dbDict);\n    if (!keys.includes(database)) {\n      return Promise.reject(`Execute: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[database];\n    try {\n      const ret: number = await mDB.executeSQL(statements, transaction);\n      const changes: SQLiteChanges = {changes: {changes: ret}};\n      return Promise.resolve(changes);\n    } catch (err) {\n      return Promise.reject(`Execute: ${err.message}`);\n    }\n  }\n  private async _executeSet(database:string, setOfStatements: SQLiteSet[], transaction: boolean): Promise<SQLiteChanges> {\n    const keys = Object.keys(this._dbDict);\n    if (!keys.includes(database)) {\n      return Promise.reject(`ExecuteSet: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[database];\n    for (const sStmt of setOfStatements) {\n      if (!('statement' in sStmt) || !('values' in sStmt)) {\n        return Promise.reject(\n          'ExecuteSet: Must provide a set as ' + 'Array of {statement,values}',\n        );\n      }\n    }\n    try {\n      const ret: any = await mDB.execSet(setOfStatements, transaction);\n      const changes: SQLiteChanges = {changes: {changes: ret.changes, lastId: ret.lastId}};\n      return Promise.resolve(changes);\n    } catch (err) {\n      return Promise.reject(`ExecuteSet: ${err.message}`);\n    }\n  }\n    private async _run(database: string, statement: string, values: any[], transaction: boolean): Promise<SQLiteChanges> {\n    const keys = Object.keys(this._dbDict);\n    if (!keys.includes(database)) {\n      return Promise.reject(`Run: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[database];\n    try {\n      const ret: any = await mDB.runSQL(statement, values, transaction);\n      const changes: SQLiteChanges = {changes: {changes: ret.changes, lastId: ret.lastId}};\n      return Promise.resolve(changes);\n    } catch (err) {\n      return Promise.reject(`Run: ${err.message}`);\n    }\n  }\n  private async _query(database: string, statement: string, values: any[]): Promise<SQLiteValues> {\n    const keys = Object.keys(this._dbDict);\n    if (!keys.includes(database)) {\n      return Promise.reject(`Query: No available connection for ${database}`);\n    }\n    const mDB = this._dbDict[database];\n    let ret: any[] = [];\n    try {\n      ret = await mDB.selectSQL(statement, values);\n      return Promise.resolve({ values: ret });\n    } catch (err) {\n      return Promise.reject(`Query failed: ${err.message}`);\n    }\n  }\n  private async _getTableList(database: string): Promise<SQLiteValues> {\n    const keys = Object.keys(this._dbDict);\n    if (!keys.includes(database)) {\n      return Promise.reject(`GetTableList: No available connection for ${database}`);\n    }\n    const mDB = this._dbDict[database];\n    let ret: any[] = [];\n    try {\n      ret = await mDB.getTableNames();\n      return Promise.resolve({ values: ret });\n    } catch (err) {\n      return Promise.reject(`GetTableList failed: ${err.message}`);\n    }\n  }\n  private async _isDBExists(database:string): Promise<SQLiteResult> {\n    const keys = Object.keys(this._dbDict);\n    if (!keys.includes(database)) {\n      return Promise.reject(`IsDBExists: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[database];\n    try {\n      const ret: boolean = await mDB.isDBExists(database + 'SQLite.db');\n      const result: SQLiteResult = {result: ret};\n      return Promise.resolve(result);\n    } catch (err) {\n      return Promise.reject(`IsDBExists: ${err.message}`);\n    }\n\n  }\n  private async _isDBOpen(database:string): Promise<SQLiteResult> {\n    const keys = Object.keys(this._dbDict);\n    if (!keys.includes(database)) {\n      return Promise.reject(`IsDBOpen: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[database];\n    try {\n      const ret: boolean = await mDB.isDBOpen(database + 'SQLite.db');\n      const result = {result: ret};\n      return Promise.resolve(result);\n    } catch (err) {\n      return Promise.reject(`IsDBOpen: ${err.message}`);\n    }\n  }\n  private async _deleteDatabase(database: string): Promise<void> {\n    const keys = Object.keys(this._dbDict);\n    if (!keys.includes(database)) {\n      return Promise.reject(`DeleteDatabase: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[database];\n    try {\n      await mDB.deleteDB(database + 'SQLite.db');\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(`DeleteDatabase: ${err.message}`);\n    }\n  }\n  private async _isTableExists(database: string, table: string): Promise<SQLiteResult> {\n    const keys = Object.keys(this._dbDict);\n    if (!keys.includes(database)) {\n      return Promise.reject(`IsTableExists: No available connection for ${database}`);\n    }\n\n    const mDB = this._dbDict[database];\n    try {\n      const ret: boolean = await mDB.isTable(table);\n      const result = {result: ret};\n      return Promise.resolve(result);\n    } catch (err) {\n      return Promise.reject(`IsTableExists: ${err.message}`);\n    }\n  }\n  private async _createSyncTable(database: string): Promise<SQLiteChanges> {\n    const keys = Object.keys(this._dbDict);\n    if (!keys.includes(database)) {\n      return Promise.reject(\n        'CreateSyncTable: No available connection for ' + `${database}`,\n      );\n    }\n\n    const mDB = this._dbDict[database];\n    try {\n      const ret: number = await mDB.createSyncTable();\n      return Promise.resolve({ changes: { changes: ret } });\n    } catch (err) {\n      return Promise.reject(`CreateSyncTable: ${err.message}`);\n    }\n  }\n  private async _getSyncDate(database: string): Promise<SQLiteSyncDate>  {\n    const keys = Object.keys(this._dbDict);\n    if (!keys.includes(database)) {\n      return Promise.reject(\n        'GetSyncDate: No available connection for ' + `${database}`,\n      );\n    }\n\n    const mDB = this._dbDict[database];\n    try {\n      const ret: number = await mDB.getSyncDate();\n      return Promise.resolve({syncDate:ret});\n    } catch (err) {\n      return Promise.reject(`GetSyncDate: ${err.message}`);\n    }\n\n  }\n  private async _setSyncDate(database: string, syncDate: string): Promise<void> {\n    const keys = Object.keys(this._dbDict);\n    if (!keys.includes(database)) {\n      return Promise.reject(\n        'SetSyncDate: No available connection for ' + `${database}`,\n      );\n    }\n\n    const mDB = this._dbDict[database];\n    try {\n      const ret = await mDB.setSyncDate(syncDate);\n      if(ret.result) {\n        return Promise.resolve();\n      } else {\n        return Promise.reject(`SetSyncDate: ${ret.message}`);\n      }\n    } catch (err) {\n      return Promise.reject(`SetSyncDate: ${err.message}`);\n    }\n\n  }\n  async _isJsonValid(jsonStrObj: string): Promise<SQLiteResult> {\n    const jsonObj = JSON.parse(jsonStrObj);\n    const isValid = await isJsonSQLite(jsonObj);\n    if (!isValid) {\n      return Promise.reject('IsJsonValid: Stringify Json Object not Valid');\n    } else {\n      return Promise.resolve({ result: true });\n    }\n  }\n  async _importFromJson(jsonStrObj: string): Promise<SQLiteChanges> {\n    const jsonObj = JSON.parse(jsonStrObj);\n    const isValid = await isJsonSQLite(jsonObj);\n    if (!isValid) {\n      return Promise.reject('ImportFromJson: Stringify Json Object not Valid');\n    }\n    const vJsonObj: JsonSQLite = jsonObj;\n    const dbName = `${vJsonObj.database}SQLite.db`;\n    const dbVersion: number = vJsonObj.version ?? 1;\n    const mode: string = vJsonObj.mode;\n    const overwrite: boolean = vJsonObj.overwrite ?? false;\n    // Create the database\n    const mDb: Database = new Database(dbName, dbVersion, {}, this.store, this.innerAutoSave);\n    try {\n      if(overwrite && mode === 'full') {\n        const isExists = isDBInStore(dbName,this.store);\n        if(isExists) {\n          await removeDBFromStore(dbName,this.store);\n        }\n      }\n      // Open the database\n      await mDb.open();\n      const tableList = await mDb.getTableNames();\n      if(mode === 'full' && tableList.length > 0) {\n        const curVersion = await mDb.getVersion();\n        if(dbVersion < curVersion) {\n          return Promise.reject(`ImportFromJson: Cannot import a version lower than ${curVersion}`);\n        }\n        if( curVersion === dbVersion) {\n          return Promise.resolve({ changes: { changes: 0 } });\n        }\n      }\n\n      // Import the JsonSQLite Object\n      const changes = await mDb.importJson(vJsonObj, this.importProgress);\n      // Close the database\n      await mDb.close();\n      return Promise.resolve({ changes: { changes: changes } });\n    } catch (err) {\n      return Promise.reject(`ImportFromJson: ${err.message}`);\n    }\n  }\n  async _exportToJson(database: string, exportMode: string): Promise<SQLiteJson> {\n    const keys = Object.keys(this._dbDict);\n    if (!keys.includes(database)) {\n      return Promise.reject(\n        'ExportToJson: No available connection for ' + `${database}`,\n      );\n    }\n    const mDb = this._dbDict[database];\n    try {\n      const ret: any = await mDb.exportJson(exportMode, this.exportProgress);\n      const keys = Object.keys(ret);\n      if (keys.includes('message')) {\n        return Promise.reject(`ExportToJson: ${ret.message}`);\n      } else {\n        return Promise.resolve({ export: ret });\n      }\n    } catch (err) {\n      return Promise.reject(`ExportToJson: ${err.message}`);\n    }\n\n  }\n  async _deleteExportedRows(database: string): Promise<void> {\n    const keys = Object.keys(this._dbDict);\n    if (!keys.includes(database)) {\n      return Promise.reject(\n        'ExportToJson: No available connection for ' + `${database}`,\n      );\n    }\n    const mDb = this._dbDict[database];\n    try {\n      await mDb.deleteExportedRows();\n    } catch (err) {\n      return Promise.reject(`DeleteExportedRows: ${err.message}`);\n    }\n  }\n\n  async _copyFromAssets(overwrite: boolean): Promise<void> {\n    const res = await this.loadJSON('assets/databases/databases.json');\n    if(res != null) {\n      this.databaseList = JSON.parse(res);\n      const keys = Object.keys(this.databaseList);\n      if (keys.includes(\"databaseList\")) {\n        try {\n          for( const dbName of this.databaseList.databaseList) {\n            if( dbName.substring(dbName.length - 3) === \".db\") {\n              await this.copyDatabase(`assets/databases/${dbName}`, overwrite);\n            }\n            if( dbName.substring(dbName.length - 4) === \".zip\") {\n              await this.unzipDatabase(`assets/databases/${dbName}`, overwrite);\n            }\n          }\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(`CopyFromAssets: ${err.message}`);\n        }\n      } else {\n        return Promise.reject(`CopyFromAssets: no key databaseList in databases.json`);\n      }\n    } else {\n      return Promise.reject(`CopyFromAssets: no databases.json file in assets/databases folder`);\n    }\n  }\n  async _isDatabase(database:string): Promise<SQLiteResult> {\n    try {\n      const ret: boolean = await isDBInStore(database + 'SQLite.db', this.store);\n      const result: SQLiteResult = {result: ret};\n      return Promise.resolve(result);\n    } catch (err) {\n      return Promise.reject(`IsDatabase: ${err.message}`);\n    }\n\n  }\n  async _getDatabaseList(): Promise<SQLiteValues> {\n    try {\n      const ret: string[] = await getDBListFromStore(this.store);\n      const result: SQLiteValues = {values: ret};\n      return Promise.resolve(result);\n    } catch (err) {\n      return Promise.reject(`GetDatabaseList: ${err.message}`);\n    }\n  }\n  async _checkConnectionsConsistency(dbNames: string[]): Promise<SQLiteResult> {\n    const ret: SQLiteResult = {} as SQLiteResult;\n    ret.result = false;\n    try {\n      let inConnectionsSet: Set<string> = new Set(Object.keys(this._dbDict));\n      const outConnectionSet: Set<string> = new Set(dbNames);\n      if(outConnectionSet.size === 0 ) {\n        await this._resetDbDict(Object.keys(this._dbDict));\n        return Promise.resolve(ret);\n      }\n      if(inConnectionsSet.size < outConnectionSet.size) {\n        await this._resetDbDict(Object.keys(this._dbDict));\n        return Promise.resolve(ret);\n      }\n      if(inConnectionsSet.size > outConnectionSet.size) {\n        for ( const key of inConnectionsSet) {\n          if(!Array.from(outConnectionSet.keys()).includes(key) ) {\n            await this._closeConnection(key);\n          }\n        }\n      }\n      inConnectionsSet = new Set(Object.keys(this._dbDict));\n      if(inConnectionsSet.size === outConnectionSet.size) {\n        const symDiffSet = await this.symmetricDifference(inConnectionsSet,outConnectionSet);\n        if(symDiffSet.size === 0) {\n          ret.result = true;\n          return Promise.resolve(ret);\n        } else {\n          await this._resetDbDict(Object.keys(this._dbDict));\n          return Promise.resolve(ret);\n          }\n      } else {\n        await this._resetDbDict(Object.keys(this._dbDict));\n        return Promise.resolve(ret);\n      }\n    } catch (err) {\n      return Promise.reject(`CheckConnectionsConsistency: ${err.message}`);\n    }\n  }\n  private async _resetDbDict(keys: string[]): Promise<void> {\n    try {\n      for (const key of keys) {\n        await this._closeConnection(key);\n      }\n    } catch (err) {\n      return Promise.reject(`ResetDbDict: ${err.message}`);\n    }\n\n  }\n  private async symmetricDifference(setA: Set<string>, setB: Set<string>): Promise<Set<string>> {\n    let _difference: Set<string> = new Set(setA)\n    for (const elem of setB) {\n        if (_difference.has(elem)) {\n            _difference.delete(elem)\n        } else {\n            _difference.add(elem)\n        }\n    }\n    return _difference\n}\nprivate async unzipDatabase(dbZipName: string, overwrite: boolean): Promise<void> {\n  return new Promise ((resolve,reject) => {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', dbZipName, true);\n    xhr.responseType = 'arraybuffer';\n    xhr.onerror = () => {\n      reject(`unzipDatabase: failed`);\n    }\n    xhr.onload =  () => {\n      try {\n\n        JSZip.loadAsync(xhr.response).then( (zip) => {\n          Object.keys(zip.files).forEach( (filename) => {\n            zip.files[filename].async('nodebuffer').then(async (fileData) => {\n              const uInt8Array = new Uint8Array(fileData);\n              const dbName = this.setPathSuffix(filename);\n              // check if dbName exists\n              const isExist: boolean = await isDBInStore(dbName, this.store);\n              if (!isExist || overwrite) {\n                if(overwrite && isExist) {\n                  await removeDBFromStore(dbName, this.store);\n                }\n                await saveDBToStore(dbName, uInt8Array, this.store);\n              }\n            })\n          })\n          resolve();\n        })\n      } catch (err) {\n        reject(`unzipDatabase Error: ${err}`);\n      }\n    };\n    xhr.send();\n  });\n}\n\n  private async copyDatabase(dbAssetName: string, overwrite: boolean): Promise<void> {\n    return new Promise ((resolve,reject) => {\n      var xhr = new XMLHttpRequest();\n      var uInt8Array: Uint8Array;\n      xhr.open('GET', dbAssetName, true);\n      xhr.responseType = 'arraybuffer';\n      xhr.onerror = () => {\n        reject(`CopyDatabase: failed`);\n      }\n      xhr.onload =  () => {\n          uInt8Array = new Uint8Array(xhr.response);\n      };\n      xhr.onloadend= async () => {\n        const dbName = this.setPathSuffix(dbAssetName);\n        // check if dbName exists\n        const isExist: boolean = await isDBInStore(dbName, this.store);\n        if (!isExist || overwrite) {\n          if(overwrite && isExist) {\n            await removeDBFromStore(dbName, this.store);\n          }\n          await saveDBToStore(dbName, uInt8Array, this.store);\n        }\n        resolve();\n      };\n      xhr.send();\n    });\n  }\n  private async loadJSON(jsonFileName: string): Promise<string> {\n    return new Promise ((resolve,reject) => {\n      var xobj = new XMLHttpRequest();\n      xobj.overrideMimeType(\"application/json\");\n      xobj.open('GET', jsonFileName, true);\n      xobj.onerror = () => {\n        reject(`LoadJSON: failed`);\n      }\n\n      xobj.onreadystatechange = function () {\n        if(xobj.status == 404) resolve(null);\n        if (xobj.readyState == 4 && xobj.status == 200) {\n        // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode\n        resolve(xobj.responseText);\n        }\n      };\n      xobj.send(null);\n    });\n  }\n  private async openStore(dbName: string, tableName: string): Promise<boolean> {\n    let ret = false;\n    const config: any = this.setConfig(dbName, tableName);\n    this.store = localForage.createInstance(config);\n    if (this.store != null) {\n      this.storeName = dbName;\n      ret = true;\n    }\n    return ret;\n  }\n\n  private setConfig(dbName: string, tableName: string): any {\n    const config: any = {\n      name: dbName,\n      storeName: tableName,\n      driver: [localForage.INDEXEDDB],\n      version: 1,\n    };\n    return config;\n  }\n  private setPathSuffix(db: string): string {\n    let toDb: string = db.slice(db.lastIndexOf(\"/\") + 1);\n    const ext: string = \".db\";\n    if(db.substring(db.length -3) === ext) {\n      if(!db.includes(\"SQLite.db\")) {\n        toDb = db.slice(db.lastIndexOf(\"/\") + 1, -3) + 'SQLite.db';\n      }\n    }\n    return toDb;\n  }\n  render() {\n    return ;\n  }\n}\n"]}